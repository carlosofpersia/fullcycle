
------------------------------------------------------------------------------------
  Aula 04
------------

Baixar nginx
https://hub.docker.com/_/nginx

Conferir se está tudo ok.
$ sudo docker ps -a
$ sudo docker images -a

$ sudo docker run nginx:latest
	Já instala e roda
$ Ctrl C - para parar de rodar o nginx
	Verificar as tags, as vezes tem alguma especificidade na minha aplicação.
	$ sudo docker pull nginx (não usamos ainda até aqui.)

01 Expor uma porta do nosso computador

02 Colocar o nome no containers

03 Rodar o container em background
	$ sudo docker run -d nginx
		Rodando com -d o processo roda em background

	$ sudo docker stop 476b35915fe1
		Para parar basta dar um stop no ID do container desejado

	$ sudo docker start 476b35915fe1
		Para voltar com o container desejado, liga-lo novamente, basta dar um start no ID DESEJADO. verificando com "docker ps -a"

	$ sudo docker ps

Pelo docker usar uma imagem imutável, ele sobe instantaneo!


04 Para remover o container:
	$ sudo docker rm 476b35915fe1 -f
		forçar caso ele esteja sendo usado.


------------------------------------------------------------------------------------
Aula 05
------------


$ docker ps -a

$ docker images -a


01 Colocar o nome no containers

	$ sudo docker run -d --name nginxAlpine nginx:alpine 
	$ sudo docker run -d --name nginxDefaultLinux nginx:latest

	$ sudo docker ps

	$ sudo docker stop nginxAlpine
	$ sudo docker stop nginxDefaultLinux

02 Expor uma porta do nosso computador
	Mapear uma porta da maquina para o container 
	porta_minha_maquina_linux:porta_meu_container_nginx
	Porta: 0.0.0.0:8080->80/tcp -> 8080
	http://localhost:8080/ -> browser que vou testar por exemplo.

	$ sudo docker run -d --name nginxAlpinePorta -p 8080:80 nginx:alpine (localhost:8080)
	$ sudo docker run -d --name nginxAlpinePorta2 -p 80:80 nginx:alpine (localhost)




------------------------------------------------------------------------------------
Aula 06
------------

Executar comandos no container
	Lembrando que o container é baseado em uma imagem e ela é imutável, nós alteramos no layer do container onde existe um READ/WRITE;


$ sudo docker run --name nginxDefaultLinuxLatest -d -p 80:80 nginx:latest

Docker exec para executar comandos no meu container;

$ sudo docker exec nginxDefaultLinuxLatest ls (listando dentro do container)
$ docker exec nginxDefaultLinuxLatest uname -a
	Rodei o comando uname -a dentro do container de nome nginxDefaultLinuxLatest;

$ docker exec -i -t nginxDefaultLinuxLatest bash (ou -it)
	Nesse comando eu consigo fazer uma interação input output com o container, somente o bash ele roda, mas não deixa fazer nada lá dentro;


$ sudo docker exec -i -t nginxDefaultLinuxLatest bash (terminal)
root@91548a32be28:/# ls
root@91548a32be28:/# cd /usr/share/nginx/html/
root@91548a32be28:/usr/share/nginx/html# nano index.html (da pau)
root@91548a32be28:/usr/share/nginx/html# apt-get update
root@91548a32be28:/usr/share/nginx/html# apt-get install vim


root@91548a32be28:/usr/share/nginx/html# vi index.html 

altera o arquivo ....


e testa no browser "http://localhost/"

root@91548a32be28:/# exit

TOPISSIMO!


------------------------------------------------------------------------------------
Aula 07 - Iniciando com Volumes
------------
7
Container + Volume
	Alterações no container (nginx) são perdidas quando perde o container, o volume é um layer a mais no docker para trabalhar como uma adição a imagem do container que é imútavel.

$ sudo docker run -d --name nginx_default_latest -p 8080:80 -v $(pwd):/usr/share/nginx/html nginx:latest

$ docker exec -it nginx_default_latest bash

crio um arquivo altero e by...
touch index.html
vi index.html

salvo o arquivo ....

e testa no browser "http://localhost/"



------------------------------------------------------------------------------------
Aula 08 - Continuando com volumes (Bind)
------------

Bind de Volume -> seta o diretório e seu containter;

$ sudo docker volume ls

$ sudo docker volume create vol_test 
	Cria um volume local do conatainer;

$ sudo docker volume --help

$ sudo docker volume inspect vol_test
	Apresenta as informacoes do volume;
$ sudo docker volume prune
	excluir todos os volumes, desde que não estejam atachados.


1.
$ sudo docker volume create --driver local --opt type=none --opt device=$(pwd) --opt o=bind volume_local
	Cria um volume local apontando para o computador real e não no próprio container;

2.
$ sudo docker run -d --name=nginx2_with_volume -p 8081:80 -v volume_local:/usr/share/nginx/html nginx

$ sudo docker ps


Alterar o arquivo do computador: /home/carloss/Documents/Desenvolvimento/fullcycle-projetos-docker/index.html

e testar no browser ]
http://localhost:8080/
http://localhost:8081/

A diferença criando o volume é que ele é criado e defini antes de criar uma nova imagem e quando a imagem é criada o volume pode ser atachado a ela. Este volume poderia ser criado nas nuvens também.
Enquando o volume estiver atachado em algum container, ele não pode ser excluído.
Bom para compartilhar chaves ssh, entre outros recursos externos.x'



------------------------------------------------------------------------------------
Aula 09 - Trabalhando com Networks
------------

	Um container trabalhando com outros (Networks)
		3 tipos de redes
			Bridge (Mais comum - DEFAULT);
			none (somente rede local -> container isolado);
			host (o container fala com a rede do meu computador de igual para igual);

$ sudo docker network ls

$ sudo docker run -d --name nginx1 nginx
$ sudo docker run -d --name nginx2 nginx


$ sudo docker exec -it nginx1 bash
	# apt-get update

$ sudo docker exec -it nginx2 bash
	# apt-get update


$ sudo docker exec -it nginx1 bash
	ping nginx2
		bash: ping: command not found

$ sudo docker network ls 
	bridge é o default -> para saber qual os ips devemos dar um inspect brige

$ sudo docker network inspect bridge
	nginx1: "IPv4Address": "172.17.0.2/16";
	nginx2: "IPv4Address": "172.17.0.3/16";

$ sudo docker exec -it nginx1 bash
# apt-get update
# apt-get install iputils-ping (caso o ping não funcione)
# ping 172.17.0.3

------------
Resolução de name com redes do docker com network
usar o network pelos nomes dos containers, sem precisar usar o IP.
	Criar um canal de networks, devo criar minha própria rede

$ sudo docker network create -d bridge my_first_network
$ sudo docker network ls 

------------

$ sudo docker run -d --name nginx3 --net=my_fist_network nginx 
	IP: 172.18.0.3 - nginx3

$ sudo docker run -d --name nginx4 --net=my_fist_network nginx
	IP: 172.18.0.2 - nginx4

$ sudo docker exec -it nginx3 bash
# apt-get update
# apt-get install iputils-ping (caso o ping não funcione)
# ping 172.17.0.3 (nginx2)
# ping nginx4

* Os containers só conseguem se comunicar se estiverem na mesma rede
	* Os ping só funcionam com a mesma rede (ou bridge com bridge, ou my_fist_network com my_fist_network).



------------------------------------------------------------------------------------
Aula 09 - Docker Commit
------------

























***********************************************************************************

comando muito importante para entrar no modo terminal do Docker (linha de comando):
* sudo docker exec -it nome_do_container_ou_id bash










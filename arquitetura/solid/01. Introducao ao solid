

Boas práticas sobre programação orientada a objetos;

S. O Princípio da Responsabilidade Única é sobre atores e estruturas de alto nível. 
O. O Princípio do Aberto para Expansão, Fechado para Modificação, é sobre projeto de classes e extensão de funcionalidades. 
L. O Princípio de Substituição de Liskov é sobre subtipos e herança. 
I. O Princípio da Segregação de Interfaces (ISP) é sobre lógica de negócios relacionada a comunicação com clientes.
D. O Princípio da Inversão de Dependência (Dependency Inversion - DIP) onde: 
		A) Módulos de alto nível não deveriam depender de módulos de baixo nível. Ambos deveriam depender de abstrações; 
		B) Abstrações não deveriam depender de detalhes. Detalhes devem depender de abstrações.

-----------------------------------------------------------------------------------
	Aula 01
--------------------
https://code.tutsplus.com/series/the-solid-principles--cms-634

Introdução ao SOLID:

Responsabilidade Única (SRP - Single Responsability), 
Aberto para Expansão, 
Fechado para Modificações (Open/Close), 
Substituição de Liskov e Segregação de Interfaces, 
Inversão de Dependência (Dependency Inversion). 

Cinco princípios ágeis que deveriam guiar você todas as vezes que fosse programar.



	é um acrônimo (itens e regras) que consolida 5 itens que são considerados como boas práticas no mundo do desenvolvimendo orientado a objetos.

	Criado por Robert C. Martin (UNCLE|TIO BOB)  no Livro Agile Software Development (Principles, Patterns, and Practices);

	SRP = Single Responsibility Principle;
	OCP = Open-closed Principle;
	LSP = Liskov Substitution Principle;
	ISP = Interface Segregation Principle;
	DIP = Dependency Inversion Principle.

-----------------------------------------------------------------------------------
	Aula 02
--------------------
https://code.tutsplus.com/tutorials/solid-part-1-the-single-responsibility-principle--net-36074

SOLID - S - Single Responsibility Principle (SRP);

	Princípio da responsáblidade única;
	Uma classe deve ter uma unica responsábilidade;
	Uma classe deve ter um e apenas um motivo para mudar;

-----------------------------------------------------------------------------------
	Aula 03
--------------------
https://code.tutsplus.com/tutorials/solid-part-2-the-openclosed-principle--net-36600

SOLID - O - Open Closed Principle

	Aberta para extensão e Fechada para Implementação

	Criar uma base (abstract) para a classe e sempre que precisar algo novo, extende-la para criar as novas implementações.
	Muito próximo ao Padrão de Projetos Strategy


-----------------------------------------------------------------------------------
	Aula 04
--------------------
https://code.tutsplus.com/pt/tutorials/solid-part-3-liskov-substitution-interface-segregation-principles--net-36710

SOLID - LSP - Liskov Substitution Principle (Barbara Liskov)
Princípios SOLID Parte 3 - Princípios da Substituição de Liskov e Segregação de Interfaces

	Subclasses podem ser substituidas por suas classes pai.

	Implemente para uma interface, nao para uma implementacao.

Princípio da Substituição de Liskov (LSP)

Classes filhas nunca deveriam infringir as definições de tipo da classe pai.


Seja q(x) uma propriedade que se pode provar do objeto x do tipo T. Então, q(y) também é possível provar para o objeto y do tipo S, sendo S um subtipo de T.

Subtipos devem ser substituíveis pelos seus tipos base.

class Vehicle {...}
class Car extends Vehicle {...}
class ElectricBus extends Vehicle {...}

...
class Driver {
    function go(Vehicle $v) {
        $v->startEngine();
        $v->accelerate();
    }
}

Cada objeto em nosso programa deve ser uma abstração de um conceito. 

-----------------------------------------------------------------------------------
	Aula 05
--------------------
SOLID - ISP - O Princípio da Segregação de Interfaces
https://code.tutsplus.com/pt/tutorials/solid-part-3-liskov-substitution-interface-segregation-principles--net-36710

Uma classe nao e obrigada a implementar interfaces que ela nao utilizara!

O Princípio da Segregação de Interface (ISP) afirma que nenhum cliente deve ser forçado a depender de métodos que ele não use.

As interfaces pertencem a seus clientes e não às implementações

* tirar os metodos das interfaces e criar novas interfaces, para nao ficar usando metodos que nao precisam
Segregar para conquistar!


-----------------------------------------------------------------------------------
	Aula 06 - DIP = DEPENDENCY INVERSION PRINCIPLE
--------------------
https://code.tutsplus.com/pt/tutorials/solid-part-4-the-dependency-inversion-principle--net-36872

* Dependa de abstracoes e nao de implementacoes
* Inverter as dependencias

* containers de injecao de dependencia ajudam a evitar o new dentro dos objetos.
* passar no parametro uma abstracao da classe, ou uma interface para generalizar o tipo requerido.
interface Categoria {}
class DramaCategoria implements Categoria {}
class Movie () {
	private $categoria;
	Construtor($movie, Categoria $categoria) {
		this->categoria = $categoria;
	}
	public function setCategoria (Categoria $categoria) {
		this->categoria = $categoria
	}
}

* O Princípio da Inversão da Dependência é aquele que nos leva, ou ajuda, a respeitar todos os outros princípios. Respeitando o DIP leva a:

Respeito, quase forçado, do OCP.
Separação de responsabilidades.
Uso correto de subtipos.
Oportunidade de segregar as interfaces.



*******************************************************************
Curiosidade:

 O Número Mágico Sete, Mais ou Menos Dois.

Devemos buscar ter códigos estruturados, baseados nesses números, e há inúmeras técnicas que podem nos ajudar nisso. Funções com um máximo de quatro linhas para seu tamanho (cinco, se considerarmos a linha de definição da função) permitem que elas caibam, completamente, em nossa mente. Identações não passando de cinco níveis. Classes com, no máximo, nove métodos. Padrões de Projeto que usem entre quatro e nove classes. O nosso projeto de alto nível, nos esquemas acima, usa quatro ou cinco conceitos. Há cinco princípios SOLID, cada um requerendo de cinco a nove sub-conceitos/módulos/classes para serem exemplificados. O tamanho ideal de uma equipe de programadores é entre cinco e nove. O número ideal de equipes em uma empresa é de cinco a nove.




**********************************************************

Clean Architecture

https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html

https://imasters.com.br/back-end/introducao-clean-architecture

https://medium.com/joaorobertopb/1-clean-code-o-que-%C3%A9-porque-usar-1e4f9f4454c6

https://medium.com/joaorobertopb/2-clean-code-boas-pr%C3%A1ticas-para-escrever-c%C3%B3digos-impec%C3%A1veis-361997b3c8b5

https://medium.com/@mari_azevedo/princ%C3%ADpios-s-o-l-i-d-o-que-s%C3%A3o-e-porque-projetos-devem-utiliz%C3%A1-los-bf496b82b299

https://www.eduardopires.net.br/2013/04/orientacao-a-objeto-solid/

https://medium.com/joaorobertopb/o-que-%C3%A9-solid-o-guia-completo-para-voc%C3%AA-entender-os-5-princ%C3%ADpios-da-poo-2b937b3fc530


SOLID: 5 princípios:

1. SRP - Single responsibility principle - Princípio da Responsabilidade Única - Uma classe deve ter um, e somente um, motivo para mudar.  Coesão Acoplamento TDD Reaproveitar

2. OCP - Open/closed principle - Princípio do Aberto/Fechado - Você deve ser capaz de estender um comportamento de uma classe sem a necessidade de modificá-lo. 
Padrão de projeto Strategy

3. LSP - Liskov substitution principle - Princípio da substituição de Liskov - As classes derivadas devem ser substituíveis por suas classes bases.

4. ISP - Interface segregation principle - Princípio da segregação de interfaces - Muitas interfaces específicas são melhores do que uma interface única geral.

5. DIP - Dependency inversion principle - Princípio da inversão de dependência - Dependa de abstrações e não de implementações.
De acordo com a definição do DIP, um módulo de alto nível não deve depender de módulos de baixo nível, ambos devem depender da abstração. Então, a primeira coisa que precisamos fazer é identificar no nosso código qual é o módulo de alto nível e qual é o módulo de baixo nível. Módulo de alto nível é um módulo que depende de outros módulos.
“Programe para uma interface e não para uma implementação.”
1. Módulos de alto nível não devem depender de módulos de baixo nível. Ambos devem depender da abstração.
2. Abstrações não devem depender de detalhes. Detalhes devem depender de abstrações.
Importante: Inversão de Dependência não é igual a Injeção de Dependência, fique ciente disso! A Inversão de Dependência é um princípio (Conceito) e a Injeção de Dependência é um padrão de projeto (Design Pattern).

********************



SOLID

https://medium.com/thiago-aragao/solid-princ%C3%ADpios-da-programa%C3%A7%C3%A3o-orientada-a-objetos-ba7e31d8fb25

